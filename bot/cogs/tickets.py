import discord
from discord.ext import commands
from discord import app_commands
import asyncio
import json
import aiofiles
from datetime import datetime
import uuid
import os
from typing import Optional, Union

class TicketSystem(commands.Cog):
    """Syst√®me complet de tickets et v√©rification d'identit√© pour Themis-Bot"""
    
    def __init__(self, bot):
        self.bot = bot
        self.tickets_dir = "data/tickets/"
        self.tickets_data = {}
        self._ensure_directories()
        
    def _ensure_directories(self):
        """Cr√©er les dossiers n√©cessaires"""
        os.makedirs(self.tickets_dir, exist_ok=True)
        os.makedirs("data/identity_photos/", exist_ok=True)
        
    async def cog_load(self):
        """Charger les donn√©es des tickets au d√©marrage"""
        await self.load_tickets_data()
        
    async def load_tickets_data(self):
        """Charger les donn√©es des tickets depuis le fichier"""
        try:
            async with aiofiles.open("data/tickets_data.json", "r", encoding="utf-8") as f:
                content = await f.read()
                self.tickets_data = json.loads(content)
        except FileNotFoundError:
            self.tickets_data = {"active_tickets": {}, "verification_queue": {}}
            await self.save_tickets_data()
            
    async def save_tickets_data(self):
        """Sauvegarder les donn√©es des tickets"""
        try:
            async with aiofiles.open("data/tickets_data.json", "w", encoding="utf-8") as f:
                await f.write(json.dumps(self.tickets_data, indent=2, ensure_ascii=False))
        except Exception as e:
            print(f"Erreur sauvegarde tickets: {e}")

    @app_commands.command(name="ticket", description="üé´ Cr√©er un ticket de v√©rification d'identit√©")
    @app_commands.describe(
        raison="Motif de votre demande de v√©rification",
        age="Votre √¢ge (obligatoire pour la v√©rification)"
    )
    async def create_ticket(self, interaction: discord.Interaction, raison: str = "V√©rification d'identit√©", age: Optional[int] = None):
        """Cr√©er un nouveau ticket de v√©rification"""
        
        # V√©rifications de s√©curit√©
        if not interaction.guild:
            await interaction.response.send_message("‚ùå Cette commande ne peut √™tre utilis√©e que dans un serveur !", ephemeral=True)
            return
            
        if not isinstance(interaction.user, discord.Member):
            await interaction.response.send_message("‚ùå Erreur de type d'utilisateur !", ephemeral=True)
            return
        
        # V√©rifier si l'utilisateur a d√©j√† un ticket actif
        user_id = str(interaction.user.id)
        if user_id in self.tickets_data.get("active_tickets", {}):
            await interaction.response.send_message(
                "‚ùå Vous avez d√©j√† un ticket actif ! Fermez-le avant d'en cr√©er un nouveau.",
                ephemeral=True
            )
            return
            
        # V√©rifier si l'utilisateur est d√©j√† v√©rifi√©
        citoyen_role = discord.utils.get(interaction.guild.roles, name="üé≠ Citoyen")
        if citoyen_role and citoyen_role in interaction.user.roles:
            await interaction.response.send_message(
                "‚úÖ Vous √™tes d√©j√† v√©rifi√© en tant que citoyen !",
                ephemeral=True
            )
            return
            
        # V√©rifier l'√¢ge si fourni
        if age is not None and age < 13:
            await interaction.response.send_message(
                "‚ùå Vous devez avoir au moins 13 ans pour rejoindre ce serveur Discord.",
                ephemeral=True
            )
            return
            
        await interaction.response.defer(ephemeral=True)
        
        try:
            # G√©n√©rer un ID unique pour le ticket
            ticket_id = str(uuid.uuid4())[:8]
            
            # Cr√©er le canal de ticket
            guild = interaction.guild
            
            # Permissions pour le canal de ticket
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(view_channel=False),
                interaction.user: discord.PermissionOverwrite(
                    view_channel=True, send_messages=True, attach_files=True,
                    read_message_history=True
                ),
                self.bot.user: discord.PermissionOverwrite(
                    view_channel=True, send_messages=True, manage_messages=True
                )
            }
            
            # Ajouter les permissions pour les mod√©rateurs
            for role_name in ["üèõÔ∏è Gardien Supr√™me", "‚öñÔ∏è Magistrat", "üõ°Ô∏è Sentinel"]:
                role = discord.utils.get(guild.roles, name=role_name)
                if role:
                    overwrites[role] = discord.PermissionOverwrite(
                        view_channel=True, send_messages=True, manage_messages=True
                    )
            
            # Trouver ou cr√©er la cat√©gorie tickets
            category = discord.utils.get(guild.categories, name="üé´ TICKETS")
            if not category:
                category = await guild.create_category(
                    "üé´ TICKETS",
                    overwrites={
                        guild.default_role: discord.PermissionOverwrite(view_channel=False)
                    }
                )
            
            # Cr√©er le canal
            channel = await guild.create_text_channel(
                f"ticket-{interaction.user.name}-{ticket_id}",
                category=category,
                overwrites=overwrites,
                topic=f"Ticket de v√©rification pour {interaction.user.display_name}"
            )
            
            # Cr√©er l'embed d'accueil du ticket
            welcome_embed = discord.Embed(
                title="üé´ Nouveau Ticket de V√©rification",
                description=f"**Bienvenue {interaction.user.mention} !**\n\nVotre ticket a √©t√© cr√©√© avec succ√®s.",
                color=0x3498DB,
                timestamp=datetime.utcnow()
            )
            
            welcome_embed.add_field(
                name="üìã Informations du ticket",
                value=f"**ID:** `{ticket_id}`\n**Motif:** {raison}\n**√Çge d√©clar√©:** {age if age else 'Non pr√©cis√©'}",
                inline=False
            )
            
            welcome_embed.add_field(
                name="üì∏ Processus de v√©rification",
                value=(
                    "**√âtapes √† suivre :**\n"
                    "1Ô∏è‚É£ Envoyez une photo de votre pi√®ce d'identit√©\n"
                    "2Ô∏è‚É£ **IMPORTANT:** Masquez TOUT sauf votre √¢ge/date de naissance\n"
                    "3Ô∏è‚É£ Attendez la validation par un mod√©rateur\n"
                    "4Ô∏è‚É£ Recevez votre r√¥le 'Citoyen' une fois approuv√©"
                ),
                inline=False
            )
            
            welcome_embed.add_field(
                name="‚ö†Ô∏è R√®gles importantes",
                value=(
                    "‚Ä¢ Ne montrez QUE votre √¢ge sur la pi√®ce d'identit√©\n"
                    "‚Ä¢ Masquez nom, adresse, num√©ro, photo, etc.\n"
                    "‚Ä¢ Photo claire et lisible obligatoire\n"
                    "‚Ä¢ Respectez les mod√©rateurs\n"
                    "‚Ä¢ Un seul ticket par personne"
                ),
                inline=False
            )
            
            welcome_embed.set_footer(
                text="Utilisez les boutons ci-dessous pour interagir avec votre ticket"
            )
            
            # Cr√©er les boutons d'interaction
            view = TicketView(self.bot, ticket_id, user_id)
            
            message = await channel.send(embed=welcome_embed, view=view)
            
            # Enregistrer les donn√©es du ticket
            self.tickets_data.setdefault("active_tickets", {})[user_id] = {
                "ticket_id": ticket_id,
                "channel_id": channel.id,
                "user_id": interaction.user.id,
                "created_at": datetime.utcnow().isoformat(),
                "reason": raison,
                "age": age,
                "status": "en_attente",
                "welcome_message_id": message.id
            }
            
            await self.save_tickets_data()
            
            # Log dans le canal de logs si disponible
            logs_channel = discord.utils.get(guild.text_channels, name="üé´-logs-tickets")
            if logs_channel and isinstance(logs_channel, discord.TextChannel):
                log_embed = discord.Embed(
                    title="üìù Nouveau Ticket Cr√©√©",
                    color=0x00FF00,
                    timestamp=datetime.utcnow()
                )
                log_embed.add_field(name="Utilisateur", value=f"{interaction.user.mention} ({interaction.user.id})", inline=True)
                log_embed.add_field(name="Canal", value=channel.mention, inline=True)
                log_embed.add_field(name="ID Ticket", value=f"`{ticket_id}`", inline=True)
                log_embed.add_field(name="Motif", value=raison, inline=False)
                
                await logs_channel.send(embed=log_embed)
            
            await interaction.followup.send(
                f"‚úÖ Votre ticket a √©t√© cr√©√© ! Rendez-vous dans {channel.mention}",
                ephemeral=True
            )
            
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå Erreur lors de la cr√©ation du ticket : {str(e)}",
                ephemeral=True
            )

    @app_commands.command(name="verify-identity", description="üîç Valider l'identit√© d'un utilisateur (Staff uniquement)")
    @app_commands.describe(
        user="Utilisateur √† v√©rifier",
        approved="Approuver ou rejeter la v√©rification"
    )
    async def verify_identity(self, interaction: discord.Interaction, user: discord.Member, approved: bool):
        """Valider ou rejeter une v√©rification d'identit√©"""
        
        # V√©rifications de s√©curit√©
        if not interaction.guild:
            await interaction.response.send_message("‚ùå Cette commande ne peut √™tre utilis√©e que dans un serveur !", ephemeral=True)
            return
            
        if not isinstance(interaction.user, discord.Member):
            await interaction.response.send_message("‚ùå Erreur de type d'utilisateur !", ephemeral=True)
            return
        
        # V√©rifier les permissions
        required_roles = ["üèõÔ∏è Gardien Supr√™me", "‚öñÔ∏è Magistrat", "üõ°Ô∏è Sentinel"]
        if not any(role.name in required_roles for role in interaction.user.roles):
            await interaction.response.send_message(
                "‚ùå Vous n'avez pas les permissions pour effectuer cette action !",
                ephemeral=True
            )
            return
            
        user_id = str(user.id)
        
        # V√©rifier si l'utilisateur a un ticket actif
        if user_id not in self.tickets_data.get("active_tickets", {}):
            await interaction.response.send_message(
                f"‚ùå {user.mention} n'a pas de ticket actif !",
                ephemeral=True
            )
            return
            
        await interaction.response.defer()
        
        try:
            ticket_info = self.tickets_data["active_tickets"][user_id]
            
            if approved:
                # Approuver la v√©rification
                citoyen_role = discord.utils.get(interaction.guild.roles, name="üé≠ Citoyen")
                en_attente_role = discord.utils.get(interaction.guild.roles, name="üé´ En Attente")
                
                if citoyen_role:
                    await user.add_roles(citoyen_role, reason=f"V√©rification approuv√©e par {interaction.user}")
                    
                if en_attente_role and en_attente_role in user.roles:
                    await user.remove_roles(en_attente_role, reason="V√©rification r√©ussie")
                
                # Envoyer un message de confirmation dans le ticket
                channel = self.bot.get_channel(ticket_info["channel_id"])
                if channel:
                    success_embed = discord.Embed(
                        title="‚úÖ V√©rification Approuv√©e !",
                        description=f"F√©licitations {user.mention} ! Votre identit√© a √©t√© v√©rifi√©e avec succ√®s.",
                        color=0x00FF00,
                        timestamp=datetime.utcnow()
                    )
                    success_embed.add_field(
                        name="üé≠ Nouveau statut",
                        value="Vous √™tes maintenant un **Citoyen** v√©rifi√© !\nVous avez acc√®s √† tous les canaux du serveur.",
                        inline=False
                    )
                    success_embed.add_field(
                        name="üìã Prochaines √©tapes",
                        value="‚Ä¢ Lisez les r√®gles dans <#rules-channel>\n‚Ä¢ Pr√©sentez-vous si vous le souhaitez\n‚Ä¢ Profitez de votre s√©jour !",
                        inline=False
                    )
                    success_embed.set_footer(text=f"V√©rifi√© par {interaction.user.display_name}")
                    
                    await channel.send(embed=success_embed)
                    await asyncio.sleep(10)  # Laisser le temps de lire
                    
                    # Fermer le ticket automatiquement apr√®s approbation
                    await self.close_ticket_internal(channel, interaction.user, "V√©rification r√©ussie - fermeture automatique")
                
                result_msg = f"‚úÖ V√©rification de {user.mention} **approuv√©e** avec succ√®s !"
                
            else:
                # Rejeter la v√©rification
                channel = self.bot.get_channel(ticket_info["channel_id"])
                if channel:
                    reject_embed = discord.Embed(
                        title="‚ùå V√©rification Rejet√©e",
                        description=f"D√©sol√© {user.mention}, votre v√©rification a √©t√© rejet√©e.",
                        color=0xFF0000,
                        timestamp=datetime.utcnow()
                    )
                    reject_embed.add_field(
                        name="üîÑ Que faire maintenant ?",
                        value=(
                            "‚Ä¢ V√©rifiez que votre photo est claire\n"
                            "‚Ä¢ Assurez-vous que seul votre √¢ge est visible\n"
                            "‚Ä¢ Contactez un mod√©rateur pour plus d'informations\n"
                            "‚Ä¢ Vous pouvez soumettre une nouvelle photo"
                        ),
                        inline=False
                    )
                    reject_embed.set_footer(text=f"Rejet√© par {interaction.user.display_name}")
                    
                    await channel.send(embed=reject_embed)
                
                result_msg = f"‚ùå V√©rification de {user.mention} **rejet√©e**."
            
            # Log de l'action
            if interaction.guild:
                logs_channel = discord.utils.get(interaction.guild.text_channels, name="üé´-logs-tickets")
                if logs_channel and isinstance(logs_channel, discord.TextChannel):
                    log_embed = discord.Embed(
                        title="üîç V√©rification Trait√©e",
                        color=0x00FF00 if approved else 0xFF0000,
                        timestamp=datetime.utcnow()
                    )
                    log_embed.add_field(name="Utilisateur", value=f"{user.mention} ({user.id})", inline=True)
                    log_embed.add_field(name="Mod√©rateur", value=f"{interaction.user.mention}", inline=True)
                    log_embed.add_field(name="R√©sultat", value="‚úÖ Approuv√©" if approved else "‚ùå Rejet√©", inline=True)
                    log_embed.add_field(name="Ticket ID", value=f"`{ticket_info['ticket_id']}`", inline=False)
                    
                    await logs_channel.send(embed=log_embed)
            
            await interaction.followup.send(result_msg)
            
        except Exception as e:
            await interaction.followup.send(f"‚ùå Erreur lors de la v√©rification : {str(e)}")

    async def close_ticket_internal(self, channel, closer, reason="Ticket ferm√©"):
        """Fonction interne pour fermer un ticket"""
        try:
            # Trouver l'utilisateur du ticket
            user_id = None
            for uid, ticket_info in self.tickets_data.get("active_tickets", {}).items():
                if ticket_info["channel_id"] == channel.id:
                    user_id = uid
                    break
                    
            if user_id:
                # Cr√©er un transcript du ticket
                transcript = await self.create_transcript(channel)
                
                # Sauvegarder le transcript
                transcript_path = f"{self.tickets_dir}transcript_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
                async with aiofiles.open(transcript_path, "w", encoding="utf-8") as f:
                    await f.write(transcript)
                
                # Envoyer le transcript aux logs
                logs_channel = discord.utils.get(channel.guild.channels, name="üé´-logs-tickets")
                if logs_channel:
                    close_embed = discord.Embed(
                        title="üîí Ticket Ferm√©",
                        color=0xFF9900,
                        timestamp=datetime.utcnow()
                    )
                    close_embed.add_field(name="Utilisateur", value=f"<@{user_id}>", inline=True)
                    close_embed.add_field(name="Ferm√© par", value=closer.mention, inline=True)
                    close_embed.add_field(name="Raison", value=reason, inline=False)
                    
                    try:
                        with open(transcript_path, "rb") as f:
                            transcript_file = discord.File(f, filename=f"transcript_{user_id}.txt")
                            await logs_channel.send(embed=close_embed, file=transcript_file)
                    except:
                        await logs_channel.send(embed=close_embed)
                
                # Supprimer des donn√©es actives
                if user_id in self.tickets_data.get("active_tickets", {}):
                    del self.tickets_data["active_tickets"][user_id]
                    await self.save_tickets_data()
            
            # Supprimer le canal
            await channel.delete(reason=reason)
            
        except Exception as e:
            print(f"Erreur fermeture ticket: {e}")

    async def create_transcript(self, channel):
        """Cr√©er un transcript du canal"""
        transcript = f"=== TRANSCRIPT DU TICKET ===\n"
        transcript += f"Canal: #{channel.name}\n"
        transcript += f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        transcript += f"=" * 50 + "\n\n"
        
        try:
            async for message in channel.history(limit=None, oldest_first=True):
                timestamp = message.created_at.strftime('%Y-%m-%d %H:%M:%S')
                author = f"{message.author.display_name} ({message.author.id})"
                content = message.content or "[Message sans contenu]"
                
                transcript += f"[{timestamp}] {author}: {content}\n"
                
                if message.attachments:
                    for attachment in message.attachments:
                        transcript += f"  üìé Pi√®ce jointe: {attachment.filename} ({attachment.url})\n"
                
                if message.embeds:
                    for embed in message.embeds:
                        transcript += f"  üìã Embed: {embed.title or 'Sans titre'}\n"
                        
        except Exception as e:
            transcript += f"\nErreur lors de la cr√©ation du transcript: {e}\n"
            
        return transcript

class TicketView(discord.ui.View):
    """Vue avec boutons pour interagir avec les tickets"""
    
    def __init__(self, bot, ticket_id, user_id):
        super().__init__(timeout=None)
        self.bot = bot
        self.ticket_id = ticket_id
        self.user_id = user_id
        
    @discord.ui.button(label="üì∏ J'ai envoy√© ma photo", style=discord.ButtonStyle.green, emoji="üì∏")
    async def photo_sent(self, interaction: discord.Interaction, button: discord.ui.Button):
        if str(interaction.user.id) != self.user_id:
            await interaction.response.send_message("‚ùå Seul le cr√©ateur du ticket peut utiliser ce bouton !", ephemeral=True)
            return
            
        embed = discord.Embed(
            title="üì∏ Photo re√ßue !",
            description="Merci ! Un mod√©rateur va examiner votre photo sous peu.",
            color=0xFFA500
        )
        embed.add_field(
            name="‚è≥ En attente",
            value="Un membre du staff va v√©rifier votre document d'identit√©. Patientez svp.",
            inline=False
        )
        
        await interaction.response.send_message(embed=embed)
        
        # Notifier les mod√©rateurs
        if interaction.guild:
            for role_name in ["üèõÔ∏è Gardien Supr√™me", "‚öñÔ∏è Magistrat", "üõ°Ô∏è Sentinel"]:
                role = discord.utils.get(interaction.guild.roles, name=role_name)
                if role:
                    await interaction.followup.send(
                        f"üîî {role.mention} - Nouvelle photo d'identit√© √† v√©rifier dans ce ticket !",
                        ephemeral=False
                    )
                    break
    
    @discord.ui.button(label="üîí Fermer le ticket", style=discord.ButtonStyle.red, emoji="üîí")
    async def close_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        # V√©rifier les permissions
        if str(interaction.user.id) != self.user_id:
            required_roles = ["üèõÔ∏è Gardien Supr√™me", "‚öñÔ∏è Magistrat", "üõ°Ô∏è Sentinel"]
            # V√©rifier que c'est un membre et qu'il a les bonnes permissions
            if not isinstance(interaction.user, discord.Member) or not any(role.name in required_roles for role in interaction.user.roles):
                await interaction.response.send_message("‚ùå Vous n'avez pas les permissions pour fermer ce ticket !", ephemeral=True)
                return
        
        await interaction.response.send_message("üîí Fermeture du ticket en cours...", ephemeral=True)
        
        ticket_system = self.bot.get_cog('TicketSystem')
        if ticket_system:
            await ticket_system.close_ticket_internal(
                interaction.channel, 
                interaction.user, 
                f"Ferm√© par {interaction.user.display_name}"
            )
    
    @discord.ui.button(label="‚ùì Aide", style=discord.ButtonStyle.secondary, emoji="‚ùì")
    async def help_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        help_embed = discord.Embed(
            title="‚ùì Aide - V√©rification d'Identit√©",
            description="Guide pour r√©ussir votre v√©rification",
            color=0x3498DB
        )
        
        help_embed.add_field(
            name="üìã Documents accept√©s",
            value="‚Ä¢ Carte d'identit√©\n‚Ä¢ Passeport\n‚Ä¢ Permis de conduire\n‚Ä¢ Carte √©tudiante (avec √¢ge)",
            inline=True
        )
        
        help_embed.add_field(
            name="‚úÖ Comment masquer les infos",
            value="‚Ä¢ Utilisez du papier/post-it\n‚Ä¢ √âditez num√©riquement\n‚Ä¢ Utilisez un marqueur noir\n‚Ä¢ Laissez SEULEMENT l'√¢ge visible",
            inline=True
        )
        
        help_embed.add_field(
            name="‚ùå Erreurs communes",
            value="‚Ä¢ Photo floue\n‚Ä¢ Informations personnelles visibles\n‚Ä¢ Document non officiel\n‚Ä¢ √Çge non visible",
            inline=False
        )
        
        await interaction.response.send_message(embed=help_embed, ephemeral=True)

async def setup(bot):
    await bot.add_cog(TicketSystem(bot))
